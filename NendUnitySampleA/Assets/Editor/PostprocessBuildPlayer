#!/usr/bin/env ruby

require 'xcodeproj'
require 'fileutils'

PROJECT = 'Unity-iPhone'
TARGET = 'Unity-iPhone'
LIBRARY = 'Libraries'

def add_frameworks(project, names, optional = false)
    project.targets.each do |target|
        next unless TARGET == target.name
        
        build_phase = target.frameworks_build_phase
        framework_group = project.frameworks_group
        
        names.each do |name|
            next if exist_framework?(build_phase, name)
            
            path = "System/Library/Frameworks/#{name}.framework"
            file_ref = framework_group.new_reference(path)
            file_ref.name = "#{name}.framework"
            file_ref.source_tree = 'SDKROOT'
            build_file = build_phase.add_file_reference(file_ref)
            if optional
                build_file.settings = { 'ATTRIBUTES' => ['Weak'] }
            end
        end
    end
end

def add_external_frameworks(project, names)
    project.targets.each do |target|
        next unless TARGET == target.name
        
        target.build_configurations.each do |configuration|
            # Framework Search Pathsを設定
            configuration.build_settings['FRAMEWORK_SEARCH_PATHS'] = configuration.build_settings['LIBRARY_SEARCH_PATHS']
        end
        
        build_phase = target.frameworks_build_phase
        library_group = project.main_group.children.find {|child| child.path == LIBRARY}
        
        names.each do |name|
            next if exist_framework?(build_phase, name)
            
            copy_library(name)
            
            path = "#{LIBRARY}/#{name}.framework"
            file_ref = library_group.new_reference(path)
            file_ref.name = "#{name}.framework"
            file_ref.source_tree = 'SOURCE_ROOT'
            build_phase.add_file_reference(file_ref)
        end
    end
end

def exist_framework?(build_phase, name)
    build_phase.files.each do |file|
        return true if file.file_ref.name == "#{name}.framework"
    end
    false
end

def copy_library(name)
    from = File.expand_path("../../#{LIBRARY}/#{name}.framework", __FILE__)
    to = "#{ARGV[0]}/#{LIBRARY}/#{name}.framework"
    FileUtils.copy_entry(from, to)
end

project_path = ARGV[0] + "/#{PROJECT}.xcodeproj"
project = Xcodeproj::Project.new(project_path)

project.initialize_from_file

# require
add_frameworks(project, ["ImageIO", "Security"])
# optional
add_frameworks(project, ["AdSupport"], true)

project.save